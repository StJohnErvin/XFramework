using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace IdentityServer.Domain.DataTransferObjects.Legacy;

[System.Runtime.InteropServices.Guid("25AB3817-26C2-4EC8-9F0C-C91A9F7ACF63")]
public partial class LegacyContext : DbContext
{

    public LegacyContext()
    {
        //ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;
    }

    public LegacyContext(DbContextOptions<LegacyContext> options)
        : base(options)
    {
    }

    public override int SaveChanges()
    {
        var auditEntries = OnBeforeSaveChanges();
        var result = base.SaveChanges();
        OnAfterSaveChanges(auditEntries);
        return result;
    }

    private List<AuditEntry> OnBeforeSaveChanges()
    {
        ChangeTracker.DetectChanges();
        var auditEntries = new List<AuditEntry>();
        foreach (var entry in ChangeTracker.Entries())
        {
            if (entry.Entity is TblAuditHistory || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                continue;

            var auditEntry = new AuditEntry(entry);
            auditEntry.TableName = entry.Metadata.GetTableName();
            auditEntries.Add(auditEntry);

            foreach (var property in entry.Properties)
            {
                switch (property.Metadata.Name)
                {
                    case "IsEnabled":
                        property.CurrentValue ??= true;
                        break;
                    case "CreatedOn":
                        if (entry.State == EntityState.Added)
                        {
                            property.CurrentValue = DateTime.Now;
                        }
                        break;
                    case "CreatedAt":
                        if (entry.State == EntityState.Added)
                        {
                            property.CurrentValue = DateTime.Now;
                        }
                        break;
                    case "ModifiedOn":
                        property.CurrentValue = DateTime.Now;
                        break;
                    case "ModifiedAt":
                        property.CurrentValue = DateTime.Now;
                        break;
                    case "IsDeleted":
                        property.CurrentValue ??= false;
                        break;
                    case "CreatedBy":
                        property.CurrentValue ??= (long?) 0m;
                        break;
                    default:
                        break;
                }
                    
                if (property.IsTemporary)
                {
                    // value will be generated by the database, get the value after saving
                    auditEntry.TemporaryProperties.Add(property);
                    continue;
                }

                string propertyName = property.Metadata.Name;
                if (property.Metadata.IsPrimaryKey())
                {
                    auditEntry.KeyValues[propertyName] = property.CurrentValue;
                    continue;
                }

                switch (entry.State)
                {
                    case EntityState.Added:
                        auditEntry.NewValues[propertyName] = property.CurrentValue;
                        auditEntry.QueryAction = entry.State.ToString();
                        break;

                    case EntityState.Deleted:
                        auditEntry.OldValues[propertyName] = property.OriginalValue;
                        auditEntry.QueryAction = entry.State.ToString();
                        break;

                    case EntityState.Modified:
                        if (property.IsModified)
                        {
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            auditEntry.QueryAction = entry.State.ToString();
                        }
                        break;
                }
            }
        }

        // Save audit entities that have all the modifications
        foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
        {
            TblAuditHistory.Add(auditEntry.ToAudit());
        }

        // keep a list of entries where the value of some properties are unknown at this step
        return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
    }

    private int OnAfterSaveChanges(List<AuditEntry> auditEntries)
    {
        if (auditEntries == null || auditEntries.Count == 0)
            return 1;


        foreach (var auditEntry in auditEntries)
        {
            // Get the final value of the temporary properties
            foreach (var prop in auditEntry.TemporaryProperties)
            {
                if (prop.Metadata.IsPrimaryKey())
                {
                    auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                }
                else
                {
                    auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                }
            }

            // Save the Audit entry
            TblAuditHistory.Add(auditEntry.ToAudit());
        }

        return SaveChanges();
    }

    public virtual DbSet<TblAddressBarangay> TblAddressBarangay { get; set; }
    public virtual DbSet<TblAddressCity> TblAddressCity { get; set; }
    public virtual DbSet<TblAddressCountry> TblAddressCountry { get; set; }
    public virtual DbSet<TblAddressEntities> TblAddressEntities { get; set; }
    public virtual DbSet<TblAddressProvince> TblAddressProvince { get; set; }
    public virtual DbSet<TblAddressRegions> TblAddressRegions { get; set; }
    public virtual DbSet<TblAppSystem> TblAppSystem { get; set; }
    public virtual DbSet<TblAuditFields> TblAuditFields { get; set; }
    public virtual DbSet<TblAuditHistory> TblAuditHistory { get; set; }
    public virtual DbSet<TblAuditSystemLogs> TblAuditSystemLogs { get; set; }
    public virtual DbSet<TblBusinessPackage> TblBusinessPackage { get; set; }
    public virtual DbSet<TblBusinessPackageInclusions> TblBusinessPackageInclusions { get; set; }
    public virtual DbSet<TblBusinessPackageInclusionsType> TblBusinessPackageInclusionsType { get; set; }
    public virtual DbSet<TblBusinessPackageType> TblBusinessPackageType { get; set; }
    public virtual DbSet<TblCurrency> TblCurrency { get; set; }
    public virtual DbSet<TblExchangeRate> TblExchangeRate { get; set; }
    public virtual DbSet<TblIncomeDistribution> TblIncomeDistribution { get; set; }
    public virtual DbSet<TblIncomeType> TblIncomeType { get; set; }
    public virtual DbSet<TblPaynamicsResponse> TblPaynamicsResponse { get; set; }
    public virtual DbSet<TblPins> TblPins { get; set; }
    public virtual DbSet<TblTickets> TblTickets { get; set; }
    public virtual DbSet<TblUserAddresses> TblUserAddresses { get; set; }
    public virtual DbSet<TblUserAuth> TblUserAuth { get; set; }
    public virtual DbSet<TblUserAuthHistory> TblUserAuthHistory { get; set; }
    public virtual DbSet<TblUserBinaryList> TblUserBinaryList { get; set; }
    public virtual DbSet<TblUserBonus> TblUserBonus { get; set; }
    public virtual DbSet<TblUserBusinessPackage> TblUserBusinessPackage { get; set; }
    public virtual DbSet<TblUserDepositRequest> TblUserDepositRequest { get; set; }
    public virtual DbSet<TblUserIncomePartition> TblUserIncomePartition { get; set; }
    public virtual DbSet<TblUserIncomeTransaction> TblUserIncomeTransaction { get; set; }
    public virtual DbSet<TblUserInfo> TblUserInfo { get; set; }
    public virtual DbSet<TblUserMap> TblUserMap { get; set; }
    public virtual DbSet<TblUserRank> TblUserRank { get; set; }
    public virtual DbSet<TblUserRole> TblUserRole { get; set; }
    public virtual DbSet<TblUserTicketTransfers> TblUserTicketTransfers { get; set; }
    public virtual DbSet<TblUserTickets> TblUserTickets { get; set; }
    public virtual DbSet<TblUserVerifications> TblUserVerifications { get; set; }
    public virtual DbSet<TblUserWallet> TblUserWallet { get; set; }
    public virtual DbSet<TblUserWalletAddress> TblUserWalletAddress { get; set; }
    public virtual DbSet<TblUserWalletTransaction> TblUserWalletTransaction { get; set; }
    public virtual DbSet<TblUserWithdrawalRequest> TblUserWithdrawalRequest { get; set; }
    public virtual DbSet<TblVerificationType> TblVerificationType { get; set; }
    public virtual DbSet<TblWalletType> TblWalletType { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
            var environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
            switch (environment)
            {
                case "Development":
                    optionsBuilder.UseNpgsql("Host=localhost;Database=iMannaX;Username=dbAdmin;Password=4*5WD-K8%f*NqmPY");
                    //optionsBuilder.UseNpgsql("Host=94.237.65.126;Database=iMannaX;Username=dbAdmin;Password=(DzNaw#N+mr?xg4$");
                    break;
                case "Staging":
                    optionsBuilder.UseNpgsql("Host=localhost;Database=iMannaX;Username=dbAdmin;Password=4*5WD-K8%f*NqmPY");
                    break;
                default:
                    optionsBuilder.UseNpgsql("Host=94.237.65.126;Database=iMannaX;Username=dbAdmin;Password=(DzNaw#N+mr?xg4$");
                    break;
            }
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TblAddressBarangay>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AddressBarangay", "dbo");

            entity.HasIndex(e => e.Code)
                .HasName("addresses_refbrgy_code_uindex")
                .IsUnique();

            entity.Property(e => e.Id)
                .HasColumnName("id")
                .ValueGeneratedNever();

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.CityCodeNavigation)
                .WithMany(p => p.TblAddressBarangay)
                .HasPrincipalKey(p => p.Code)
                .HasForeignKey(d => d.CityCode), "tbl_addressbarangay_tbl_addresscity_code_fk");
        });

        modelBuilder.Entity<TblAddressCity>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AddressCity", "dbo");

            entity.HasIndex(e => e.Code)
                .HasName("tbl_addresscity_code_uindex")
                .IsUnique();

            entity.Property(e => e.Id)
                .HasColumnName("id")
                .ValueGeneratedNever();

            entity.Property(e => e.Code).IsRequired();

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.ProvCodeNavigation)
                .WithMany(p => p.TblAddressCity)
                .HasPrincipalKey(p => p.Code)
                .HasForeignKey(d => d.ProvCode), "tbl_addresscity_tbl_addressprovince_code_fk");
        });

        modelBuilder.Entity<TblAddressCountry>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AddressCountry", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

            entity.Property(e => e.IsoCode2).HasMaxLength(2);

            entity.Property(e => e.IsoCode3).HasMaxLength(3);

            entity.Property(e => e.Language).HasMaxLength(50);

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name).HasMaxLength(50);

            entity.Property(e => e.PhoneCountryCode).HasMaxLength(9);

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.Currency)
                .WithMany(p => p.TblAddressCountry)
                .HasForeignKey(d => d.CurrencyId), "CurrencyID");
        });

        modelBuilder.Entity<TblAddressEntities>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AddressEntities", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name).HasMaxLength(500);
        });

        modelBuilder.Entity<TblAddressProvince>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AddressProvince", "dbo");

            entity.HasIndex(e => e.Code)
                .HasName("tbl_addressprovince_code_uindex")
                .IsUnique();

            entity.HasIndex(e => e.Id)
                .HasName("addresses_refprovince_id_uindex")
                .IsUnique();

            entity.Property(e => e.Id)
                .HasColumnName("id")
                .ValueGeneratedNever();

            entity.Property(e => e.Code).IsRequired();

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.RegCodeNavigation)
                .WithMany(p => p.TblAddressProvince)
                .HasPrincipalKey(p => p.Code)
                .HasForeignKey(d => d.RegCode), "tbl_addressprovince_tbl_addressregions_code_fk");
        });

        modelBuilder.Entity<TblAddressRegions>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AddressRegions", "dbo");

            entity.HasIndex(e => e.Code)
                .HasName("tbl_addressregions_code_uindex")
                .IsUnique();

            entity.HasIndex(e => e.Id)
                .HasName("tbl_addressregions_id_uindex")
                .IsUnique();

            entity.Property(e => e.Id)
                .HasColumnName("id")
                .ValueGeneratedNever();

            entity.Property(e => e.Code).IsRequired();
        });

        modelBuilder.Entity<TblAppSystem>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AppSystem", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.Property(e => e.PublicByte).IsRequired();

            entity.Property(e => e.Uid)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<TblAuditFields>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AuditFields", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");
        });

        modelBuilder.Entity<TblAuditHistory>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AuditHistory", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.KeyValues).HasColumnType("character varying");

            entity.Property(e => e.NewValues).HasColumnType("character varying");

            entity.Property(e => e.OldValues).HasColumnType("character varying");

            entity.Property(e => e.QueryAction).HasColumnType("character varying");

            entity.Property(e => e.TableName).HasColumnType("character varying");
        });

        modelBuilder.Entity<TblAuditSystemLogs>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_AuditSystemLogs", "dbo");

            entity.HasIndex(e => e.Id)
                .HasName("tbl_auditsystemlogs")
                .IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Message).HasColumnType("character varying");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnType("character varying");

            entity.Property(e => e.TaggedUserId).HasColumnName("TaggedUserID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.TaggedUser)
                .WithMany(p => p.TblAuditSystemLogs)
                .HasForeignKey(d => d.TaggedUserId), " tbl_auditsystemlogs___fk");
        });

        modelBuilder.Entity<TblBusinessPackage>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_BusinessPackage", "dbo");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.BannerImageFile).HasColumnType("character varying");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

            entity.Property(e => e.ExpiryDate).HasColumnType("timestamp(6) with time zone");

            entity.Property(e => e.IconImageFile).HasColumnType("character varying");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.PackageCode).HasMaxLength(16);

            entity.Property(e => e.PackageDescription).HasMaxLength(500);

            entity.Property(e => e.PackageName).HasMaxLength(100);

            entity.Property(e => e.PackageTypeId).HasColumnName("PackageTypeID");

            entity.Property(e => e.ValueFrom).HasColumnType("numeric(18,8)");

            entity.Property(e => e.ValueTo).HasColumnType("numeric(18,8)");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.Currency)
                .WithMany(p => p.TblBusinessPackage)
                .HasForeignKey(d => d.CurrencyId), "CurrencyID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.PackageType)
                .WithMany(p => p.TblBusinessPackage)
                .HasForeignKey(d => d.PackageTypeId), "PackageTypeID");
        });

        modelBuilder.Entity<TblBusinessPackageInclusions>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_BusinessPackageInclusions", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.BusinessPackageId).HasColumnName("BusinessPackageID");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.InclusionTypeId).HasColumnName("InclusionTypeID");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.StringValue).HasMaxLength(100);

            entity.Property(e => e.Value).HasColumnType("numeric(16,5)");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.BusinessPackage)
                .WithMany(p => p.TblBusinessPackageInclusions)
                .HasForeignKey(d => d.BusinessPackageId), "BusinessPackageID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.InclusionType)
                .WithMany(p => p.TblBusinessPackageInclusions)
                .HasForeignKey(d => d.InclusionTypeId), "BusinessPackageInclusionsTypeID");
        });

        modelBuilder.Entity<TblBusinessPackageInclusionsType>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_BusinessPackageInclusionsType", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.Code).HasMaxLength(5);

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Description).HasMaxLength(1000);

            entity.Property(e => e.IconImage).HasColumnType("character varying");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.Property(e => e.Unit).HasColumnType("character varying");
        });

        modelBuilder.Entity<TblBusinessPackageType>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_BusinessPackageType", "dbo");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Description).HasMaxLength(500);

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<TblCurrency>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_Currency", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.CurrencyIsoCode3)
                .IsRequired()
                .HasMaxLength(4);

            entity.Property(e => e.Description).HasMaxLength(500);

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256);
        });

        modelBuilder.Entity<TblExchangeRate>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_ExchangeRate", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.EffectivityDate).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ExpiryDate).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Fee).HasColumnType("numeric(18,10)");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.SourceCurrencyId).HasColumnName("SourceCurrencyID");

            entity.Property(e => e.TargetCurrencyId).HasColumnName("TargetCurrencyID");

            entity.Property(e => e.Value).HasColumnType("numeric(18,10)");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.SourceCurrency)
                .WithMany(p => p.TblExchangeRateSourceCurrency)
                .HasForeignKey(d => d.SourceCurrencyId)
                .OnDelete(DeleteBehavior.ClientSetNull), "SourceCurrencyID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.TargetCurrency)
                .WithMany(p => p.TblExchangeRateTargetCurrency)
                .HasForeignKey(d => d.TargetCurrencyId)
                .OnDelete(DeleteBehavior.ClientSetNull), "TargetCurrencyID");
        });

        modelBuilder.Entity<TblIncomeDistribution>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_IncomeDistribution", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasIdentityOptions(null, null, null, 2147483647L, null, null)
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.BusinessPackageId).HasColumnName("BusinessPackageID");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.IncomeTypeId).HasColumnName("IncomeTypeID");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Value).HasColumnType("numeric(18,10)");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.BusinessPackage)
                .WithMany(p => p.TblIncomeDistribution)
                .HasForeignKey(d => d.BusinessPackageId)
                .OnDelete(DeleteBehavior.ClientSetNull), "BusinessPackageID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.IncomeType)
                .WithMany(p => p.TblIncomeDistribution)
                .HasForeignKey(d => d.IncomeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull), "IncomeTypeID");
        });

        modelBuilder.Entity<TblIncomeType>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_IncomeType", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.IncomePercentage).HasColumnType("numeric(18,10)");

            entity.Property(e => e.IncomeTypeDescription).HasMaxLength(500);

            entity.Property(e => e.IncomeTypeName)
                .IsRequired()
                .HasMaxLength(100);

            entity.Property(e => e.IncomeTypeShortName).HasMaxLength(50);

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");
        });

        modelBuilder.Entity<TblPaynamicsResponse>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_PaynamicsResponse", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.Description).HasMaxLength(1000);

            entity.Property(e => e.ResponseCode).HasMaxLength(5);

            entity.Property(e => e.ResponseMessage).HasMaxLength(255);
        });

        modelBuilder.Entity<TblPins>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_Pins", "dbo");

            entity.HasIndex(e => e.Id)
                .HasName("pins_\"id\"_uindex")
                .IsUnique();

            entity.HasIndex(e => e.Value)
                .HasName("pins_value_uindex")
                .IsUnique();

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasDefaultValueSql("nextval('dbo.\"Pins_ID_seq\"'::regclass)");

            entity.Property(e => e.CreatedAt).HasColumnType("timestamp with time zone");

            entity.Property(e => e.IsEnabled)
                .IsRequired()
                .HasDefaultValueSql("true");

            entity.Property(e => e.ModifiedAt).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<TblTickets>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_Tickets", "dbo");

            entity.HasIndex(e => e.Id)
                .HasName("tbl_tickets_id_uindex")
                .IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.CreatedAt).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Description).HasColumnType("character varying");

            entity.Property(e => e.ModifiedAt).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name).HasColumnType("character varying");

            entity.Property(e => e.Uuid)
                .HasColumnName("UUID")
                .HasColumnType("character varying");

            entity.Property(e => e.Value).HasColumnType("numeric(10,2)");
        });

        modelBuilder.Entity<TblUserAddresses>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserAddresses", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasIdentityOptions(null, null, null, 2147483647L, null, null)
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.AddressEntitiesId).HasColumnName("AddressEntitiesID");

            entity.Property(e => e.Building).HasMaxLength(500);

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Street).HasMaxLength(500);

            entity.Property(e => e.Subdivision).HasMaxLength(500);

            entity.Property(e => e.UnitNumber).HasMaxLength(500);

            entity.Property(e => e.UserInfoId).HasColumnName("UserInfoID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.AddressEntities)
                .WithMany(p => p.TblUserAddresses)
                .HasForeignKey(d => d.AddressEntitiesId), "AddressEntitiesID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.BarangayNavigation)
                .WithMany(p => p.TblUserAddresses)
                .HasForeignKey(d => d.Barangay), "tbl_useraddresses_tbl_addressbarangay_id_fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.CityNavigation)
                .WithMany(p => p.TblUserAddresses)
                .HasForeignKey(d => d.City), "tbl_useraddresses_tbl_addresscity_id_fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.ProvinceNavigation)
                .WithMany(p => p.TblUserAddresses)
                .HasForeignKey(d => d.Province), "tbl_useraddresses_tbl_addressprovince_id_fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.RegionNavigation)
                .WithMany(p => p.TblUserAddresses)
                .HasForeignKey(d => d.Region), "tbl_useraddresses_tbl_addressregions_id_fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserInfo)
                .WithMany(p => p.TblUserAddresses)
                .HasForeignKey(d => d.UserInfoId), "UserInfoID");
        });

        modelBuilder.Entity<TblUserAuth>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserAuth", "dbo");

            entity.HasIndex(e => e.UserName)
                .HasName("Username")
                .IsUnique();

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ResetPasswordCodeExpiration).HasColumnType("timestamp with time zone");

            entity.Property(e => e.TemporaryPassword).HasMaxLength(256);

            entity.Property(e => e.UserAlias).HasMaxLength(256);

            entity.Property(e => e.UserInfoId).HasColumnName("UserInfoID");

            entity.Property(e => e.UserName).HasMaxLength(50);

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserInfo)
                .WithMany(p => p.TblUserAuth)
                .HasForeignKey(d => d.UserInfoId)
                .OnDelete(DeleteBehavior.ClientSetNull), "tbl_UserAuth_UserInfoID_fkey");
        });

        modelBuilder.Entity<TblUserAuthHistory>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserAuthHistory", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.DeviceName).HasMaxLength(50);

            entity.Property(e => e.Ipaddress)
                .HasColumnName("IPAddress")
                .HasMaxLength(18);

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LoginSource).HasMaxLength(50);

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.UserAuthId).HasColumnName("UserAuthID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserAuthHistory)
                .HasForeignKey(d => d.UserAuthId)
                .OnDelete(DeleteBehavior.ClientSetNull), "tbl_userauthhistory_fk");
        });

        modelBuilder.Entity<TblUserBinaryList>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserBinaryList", "dbo");

            entity.Property(e => e.Id).HasColumnName("id");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.SourceUserMapId).HasColumnName("SourceUserMapID");

            entity.Property(e => e.TargetUserMapId).HasColumnName("TargetUserMapID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.SourceUserMap)
                .WithMany(p => p.TblUserBinaryListSourceUserMap)
                .HasForeignKey(d => d.SourceUserMapId), "tbl_userbinarylist_tbl_usermap_id_fk_2");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.TargetUserMap)
                .WithMany(p => p.TblUserBinaryListTargetUserMap)
                .HasForeignKey(d => d.TargetUserMapId), "tbl_userbinarylist_tbl_usermap_id_fk");
        });

        modelBuilder.Entity<TblUserBonus>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserBonus", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.BonusName).HasMaxLength(45);

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");
        });

        modelBuilder.Entity<TblUserBusinessPackage>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserBusinessPackage", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasIdentityOptions(null, null, null, 2147483647L, null, null);

            entity.Property(e => e.ActivationDate).HasColumnType("timestamp with time zone");

            entity.Property(e => e.BusinessPackageId).HasColumnName("BusinessPackageID");

            entity.Property(e => e.CodeString).HasMaxLength(100);

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ExpiryDate).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.UserAuthId).HasColumnName("UserAuthID");

            entity.Property(e => e.UserDepositRequestId).HasColumnName("UserDepositRequestID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.BusinessPackage)
                .WithMany(p => p.TblUserBusinessPackage)
                .HasForeignKey(d => d.BusinessPackageId), "BusinessPackageID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.ConsumedByNavigation)
                .WithMany(p => p.TblUserBusinessPackageConsumedByNavigation)
                .HasForeignKey(d => d.ConsumedBy), "tbl_userbusinesspackage_fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.RecipientAuth)
                .WithMany(p => p.TblUserBusinessPackageRecipientAuth)
                .HasForeignKey(d => d.RecipientAuthId), "tbl_userbusinesspackage_tbl_userauth_id_fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserBusinessPackageUserAuth)
                .HasForeignKey(d => d.UserAuthId), "UserAuthID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserDepositRequest)
                .WithMany(p => p.TblUserBusinessPackage)
                .HasForeignKey(d => d.UserDepositRequestId), "UserDepositRequestID");
        });

        modelBuilder.Entity<TblUserDepositRequest>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserDepositRequest", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.Address).HasMaxLength(500);

            entity.Property(e => e.Amount).HasColumnType("numeric(18,10)");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ExpiryDate).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.RawData).HasMaxLength(10000);

            entity.Property(e => e.RawResponseData).HasMaxLength(5000);

            entity.Property(e => e.ReferenceNo).HasMaxLength(35);

            entity.Property(e => e.Remarks).HasMaxLength(500);

            entity.Property(e => e.UserAuthId).HasColumnName("UserAuthID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.SourceCurrency)
                .WithMany(p => p.TblUserDepositRequest)
                .HasForeignKey(d => d.SourceCurrencyId), "SourceCurrencyId");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.TargetWalletType)
                .WithMany(p => p.TblUserDepositRequest)
                .HasForeignKey(d => d.TargetWalletTypeId), "TargetWalletTypeId");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserDepositRequest)
                .HasForeignKey(d => d.UserAuthId), "UserAuthID");
        });

        modelBuilder.Entity<TblUserIncomePartition>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserIncomePartition", "dbo");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Percentage).HasColumnType("numeric(18,8)");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.IncomeType)
                .WithMany(p => p.TblUserIncomePartition)
                .HasForeignKey(d => d.IncomeTypeId), "IncomeTypeId");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserRole)
                .WithMany(p => p.TblUserIncomePartition)
                .HasForeignKey(d => d.UserRoleId), "UserRoleId");
        });

        modelBuilder.Entity<TblUserIncomeTransaction>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserIncomeTransaction", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasIdentityOptions(null, null, null, 2147483647L, null, null)
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.IncomePercentage).HasColumnType("numeric(18,10)");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Remarks).HasMaxLength(500);

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.IncomeType)
                .WithMany(p => p.TblUserIncomeTransaction)
                .HasForeignKey(d => d.IncomeTypeId), "tbl_userincometransaction_tbl_incometype_id_fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.PairMap)
                .WithMany(p => p.TblUserIncomeTransactionPairMap)
                .HasForeignKey(d => d.PairMapId), "tbl_userincometransaction_tbl_usermap_id_fk_3");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.SourceMap)
                .WithMany(p => p.TblUserIncomeTransactionSourceMap)
                .HasForeignKey(d => d.SourceMapId), "tbl_userincometransaction_tbl_usermap_id_fk_2");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.TargetMap)
                .WithMany(p => p.TblUserIncomeTransactionTargetMap)
                .HasForeignKey(d => d.TargetMapId), "tbl_userincometransaction_tbl_usermap_id_fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserIncomeTransaction)
                .HasForeignKey(d => d.UserAuthId)
                .OnDelete(DeleteBehavior.ClientSetNull), "UserAuthID");
        });

        modelBuilder.Entity<TblUserInfo>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserInfo", "dbo");

            entity.HasIndex(e => e.PhoneNumber)
                .HasName("tbl_userinfo_un")
                .IsUnique();

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasIdentityOptions(null, null, null, 2147483647L, null, null)
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CompanyName).HasMaxLength(50);

            entity.Property(e => e.ConfirmedEmail).HasMaxLength(50);

            entity.Property(e => e.CountryIsoCode2).HasMaxLength(15);

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Dob)
                .HasColumnName("DOB")
                .HasColumnType("date");

            entity.Property(e => e.Email).HasMaxLength(50);

            entity.Property(e => e.FirstName).HasMaxLength(50);

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastName).HasMaxLength(50);

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.PhoneNumber).HasMaxLength(24);

            entity.Property(e => e.Uid)
                .IsRequired()
                .HasColumnName("UID")
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TblUserMap>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserMap", "dbo");

            entity.HasIndex(e => e.Alias)
                .HasName("tbl_usermap_alias_uindex")
                .IsUnique();

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .ValueGeneratedNever();

            entity.Property(e => e.Alias).HasColumnType("character varying");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.UserUid)
                .IsRequired()
                .HasMaxLength(100);

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceReferenceBuilder)entity.HasOne(d => d.IdNavigation)
                .WithOne(p => p.TblUserMapIdNavigation)
                .HasForeignKey<TblUserMap>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull), "tbl_usermap_fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.SponsorUser)
                .WithMany(p => p.TblUserMap)
                .HasForeignKey(d => d.SponsorUserId), "SponsorUserId");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UplineUser)
                .WithMany(p => p.TblUserMapUplineUser)
                .HasForeignKey(d => d.UplineUserId), "uplineuserbpid");
        });

        modelBuilder.Entity<TblUserRank>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserRank", "dbo");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.RankName).HasMaxLength(20);

            entity.Property(e => e.RankRateAffiliate).HasColumnType("numeric(18,10)");

            entity.Property(e => e.RankRateBinary).HasColumnType("numeric(18,10)");

            entity.Property(e => e.RankRateDaily).HasColumnType("numeric(18,10)");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserRank)
                .HasForeignKey(d => d.UserAuthId), "UserAuthId");
        });

        modelBuilder.Entity<TblUserRole>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserRole", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasIdentityOptions(null, null, null, 2147483647L, null, null)
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.AccessRole).HasMaxLength(50);

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.UserAuthId).HasColumnName("UserAuthID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserRole)
                .HasForeignKey(d => d.UserAuthId)
                .OnDelete(DeleteBehavior.ClientSetNull), "tbl_UserRole_UserAuthID_fkey");
        });

        modelBuilder.Entity<TblUserTicketTransfers>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserTicketTransfers", "dbo");

            entity.HasIndex(e => e.Id)
                .HasName("tbl_usertickettransfers_\"id\"_uindex")
                .IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.CreatedAt).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedAt).HasColumnType("timestamp with time zone");

            entity.Property(e => e.SourcePhoneNumber).HasColumnType("character varying");

            entity.Property(e => e.TargetPhoneNumber).HasColumnType("character varying");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserTicket)
                .WithMany(p => p.TblUserTicketTransfers)
                .HasForeignKey(d => d.UserTicketId), "tbl_usertickettransfers_tbl_usertickets_id_fk");
        });

        modelBuilder.Entity<TblUserTickets>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserTickets", "dbo");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.CreatedAt).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedAt).HasColumnType("timestamp with time zone");

            entity.Property(e => e.PhoneNumber).HasColumnType("character varying");

            entity.Property(e => e.Uuid)
                .HasColumnName("UUID")
                .HasColumnType("character varying");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.Pin)
                .WithMany(p => p.TblUserTickets)
                .HasForeignKey(d => d.PinId), "tbl_usertickets___fk");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.TicketType)
                .WithMany(p => p.TblUserTickets)
                .HasForeignKey(d => d.TicketTypeId), "tbl_usertickets_tbl_tickets_id_fk");
        });

        modelBuilder.Entity<TblUserVerifications>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserVerifications", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasIdentityOptions(null, null, null, 2147483647L, null, null)
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Expiry).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.StatusUpdatedOn).HasColumnType("time with time zone");

            entity.Property(e => e.Token).HasColumnType("character varying");

            entity.Property(e => e.UserAuthId).HasColumnName("UserAuthID");

            entity.Property(e => e.VerificationTypeId).HasColumnName("VerificationTypeID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserVerifications)
                .HasForeignKey(d => d.UserAuthId), "tbl_UserVerifications_AuthID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.VerificationType)
                .WithMany(p => p.TblUserVerifications)
                .HasForeignKey(d => d.VerificationTypeId), "tbl_UserVerifications_VerificationTypeID");
        });

        modelBuilder.Entity<TblUserWallet>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserWallet", "dbo");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.Balance).HasColumnType("numeric(24,8)");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserWallet)
                .HasForeignKey(d => d.UserAuthId)
                .OnDelete(DeleteBehavior.ClientSetNull), "tbl_UserWallet_UserAuthId_fkey");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.WalletType)
                .WithMany(p => p.TblUserWallet)
                .HasForeignKey(d => d.WalletTypeId), "tbl_UserWallet_WalletTypeId_fkey");
        });

        modelBuilder.Entity<TblUserWalletAddress>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserWalletAddress", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.Address).HasMaxLength(512);

            entity.Property(e => e.Balance).HasColumnType("numeric(18,10)");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Remarks).HasMaxLength(100);

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserWalletAddress)
                .HasForeignKey(d => d.UserAuthId)
                .OnDelete(DeleteBehavior.ClientSetNull), "UserAuthID");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.WalletType)
                .WithMany(p => p.TblUserWalletAddress)
                .HasForeignKey(d => d.WalletTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull), "tbl_userwalletaddress_fk");
        });

        modelBuilder.Entity<TblUserWalletTransaction>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserWalletTransaction", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasIdentityOptions(null, null, null, 2147483647L, null, null)
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.Amount).HasColumnType("numeric(24,8)");

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Description).HasMaxLength(500);

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Remarks).HasMaxLength(500);

            entity.Property(e => e.RunningBalance).HasColumnType("numeric(24,8)");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.SourceUserWallet)
                .WithMany(p => p.TblUserWalletTransaction)
                .HasForeignKey(d => d.SourceUserWalletId), "SourceUserWalletId");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserWalletTransaction)
                .HasForeignKey(d => d.UserAuthId)
                .OnDelete(DeleteBehavior.ClientSetNull), "UserAuthID");
        });

        modelBuilder.Entity<TblUserWithdrawalRequest>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_UserWithdrawalRequest", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.Address).HasMaxLength(500);

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Remarks).HasColumnType("character varying");

            entity.Property(e => e.TotalAmount).HasColumnType("numeric(18,10)");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.SourceWalletType)
                .WithMany(p => p.TblUserWithdrawalRequest)
                .HasForeignKey(d => d.SourceWalletTypeId), "SourceWalletTypeId");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.TargetCurrency)
                .WithMany(p => p.TblUserWithdrawalRequest)
                .HasForeignKey(d => d.TargetCurrencyId), "TargetCurrencyId");

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.UserAuth)
                .WithMany(p => p.TblUserWithdrawalRequest)
                .HasForeignKey(d => d.UserAuthId)
                .OnDelete(DeleteBehavior.ClientSetNull), "UserAuthID");
        });

        modelBuilder.Entity<TblVerificationType>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_VerificationType", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<TblWalletType>(entity =>
        {
            RelationalEntityTypeBuilderExtensions.ToTable((EntityTypeBuilder)entity, "tbl_WalletType", "dbo");

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .HasIdentityOptions(null, null, null, 2147483647L, null, null)
                .UseIdentityAlwaysColumn();

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(9);

            entity.Property(e => e.CreatedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

            entity.Property(e => e.Desc).HasMaxLength(500);

            entity.Property(e => e.LastChanged).HasColumnType("timestamp with time zone");

            entity.Property(e => e.MaxTransfer).HasColumnType("numeric");

            entity.Property(e => e.MinTransfer).HasColumnType("numeric");

            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp with time zone");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20);

            RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)entity.HasOne(d => d.Currency)
                .WithMany(p => p.TblWalletType)
                .HasForeignKey(d => d.CurrencyId), "CurrencyID");
        });

        modelBuilder.HasSequence("tbl_AuditSystemLogs_ID_seq", "dbo");

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}