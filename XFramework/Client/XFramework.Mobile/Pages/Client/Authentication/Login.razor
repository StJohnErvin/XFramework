@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@page "/user/login"
@layout ActivityLayout
@inherits LoginBase

<ActivityHeader Title="@ActivityTitle" />
<div class="animated fadeIn activity_body">

    <form class="md-form" style="color: #757575;">

        <input type="email" id="materialLoginFormEmail" @bind="userBO.Email" class="form-control">
        <label for="materialLoginFormEmail">E-mail</label>


        <input type="password" id="materialLoginFormPassword" @bind="userBO.PasswordString" class="form-control">
        <label for="materialLoginFormPassword">Password</label>


        <div class="d-flex align-items-center justify-content-between">
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="materialLoginFormRemember">
                <label class="form-check-label" for="materialLoginFormRemember">Remember me</label>
            </div>
            <div>
                <a href="">Forgot password?</a>
            </div>
        </div>

        <div class="row my-4">
            <div class="col-12">
                <CardButton Icon="fas fa-check" Title="Continue with Log In" Slug="Existing user" Link="/Shop/Home" />
            </div>

        </div>


        <div class="text-center">
            <p>
                Not a member?
                <a href="">Register</a>
            </p>

            <p>or sign in with:</p>
            <a type="button" class="btn-floating btn-fb btn-sm">
                <i class="fab fa-facebook-f"></i>
            </a>
            <a type="button" class="btn-floating btn-tw btn-sm">
                <i class="fab fa-twitter"></i>
            </a>
            <a type="button" class="btn-floating btn-li btn-sm">
                <i class="fab fa-linkedin-in"></i>
            </a>
            <a type="button" class="btn-floating btn-git btn-sm">
                <i class="fab fa-github"></i>
            </a>
        </div>
    </form>

  
   

    

</div>


@code {

  public UserBO userBO { get; set; } = new UserBO() { };

    private async Task SendFormData()
    {
        ApiResponseBO httpResponse = await Http.PostJsonAsync<ApiResponseBO>("/api/user/authenticate", userBO);
        Console.WriteLine(httpResponse.Message);


        switch (httpResponse.HttpStatusCode)
        {
            case ApiStatus.Success:
                NavManager.NavigateTo("/Admin/Users");
                break;
            case ApiStatus.Error:
                JsRuntime.InvokeAsync<bool>("alert", httpResponse.Message);
                break;
            default:
                JsRuntime.InvokeAsync<bool>("alert", httpResponse.Message);
                break;
        }
    }
}